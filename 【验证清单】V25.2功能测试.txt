╔═══════════════════════════════════════════════════════════════════╗
║                                                                   ║
║         沐梧AI解题系统 V25.2 - 功能验证清单                       ║
║                                                                   ║
╚═══════════════════════════════════════════════════════════════════╝

请按照以下步骤逐项测试，确保所有功能正常运行。

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第一步：启动系统                                             │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 双击运行【启动】数据库版本系统.bat
  2. 等待两个cmd窗口弹出（后端+前端）
  3. 观察终端输出

  预期结果：
  □ 后端窗口显示："Uvicorn running on http://127.0.0.1:8000"
  □ 后端窗口显示："✅ 数据库连接池初始化成功"
  □ 后端窗口显示："✅ API密钥已加载: sk-xxx..."
  □ 前端窗口显示："Local: http://localhost:5173/"

  如果失败：
  → 检查8000和5173端口是否被占用
  → 检查MySQL数据库是否可访问
  → 检查.env文件是否存在API密钥

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第二步：注册新账号                                           │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 浏览器访问：http://localhost:5173/?mode=db
  2. 点击"还没有账号？立即注册"
  3. 输入测试账号：testuser001
  4. 输入密码：123456
  5. 再次输入密码：123456
  6. 点击"注册"

  预期结果：
  □ 注册成功后弹出提示："注册成功！请登录"
  □ 自动切换到登录界面

  如果失败：
  → 检查后端日志是否有数据库错误
  → 确认账号未被注册过
  → 检查密码长度（至少6位）

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第三步：登录账号                                             │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 输入账号：testuser001
  2. 输入密码：123456
  3. 点击"登录"

  预期结果：
  □ 登录成功，进入模式选择界面
  □ 看到三个选项：AI智能解题、AI批改作业、智能错题本
  □ 右上角有"退出登录"按钮

  如果失败：
  → 检查账号密码是否正确
  → 查看浏览器控制台（F12）是否有401错误
  → 检查后端日志JWT验证

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第四步：测试AI智能解题                                       │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 点击"🧠 AI 智能解题"
  2. 点击"解/改单个题目"（默认已选中）
  3. 点击"选择文件"，上传一张数学题图片
  4. （可选）拖动裁剪框选择特定区域
  5. 点击"解析整张图片"

  预期结果：
  □ 图片成功上传并显示
  □ 点击解析后，进入聊天界面
  □ 顶部显示题目图片
  □ AI开始回答（显示"正在连接AI..."）
  □ 回答显示在聊天区域
  □ 公式正确渲染（不是LaTeX源代码）
  □ 回答完成后，出现两个快捷按钮：
     • "💬 请继续回答"
     • "🔍 请检查回答是否有误"
  □ 底部出现输入框

  如果失败：
  → 检查图片格式（JPG/PNG）
  → 检查图片大小（< 10MB）
  → 查看后端日志AI调用是否成功
  → 检查API密钥是否有效

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第五步：测试公式渲染                                         │
└─────────────────────────────────────────────────────────────────┘

  观察AI回答中的数学公式：

  预期结果：
  □ 行内公式渲染正确（例如：x² + y² = r²）
  □ 块级公式居中显示，格式优美
  □ 分数、根号、积分符号等特殊符号显示正确
  □ 不显示LaTeX源代码（如 $x^2$ 应显示为 x²）

  常见公式示例：
  • 二次方：x² 
  • 分数：a/b
  • 根号：√x
  • 求和：Σ
  • 积分：∫

  如果失败（显示LaTeX源代码）：
  → 刷新页面（F5）
  → 等待5秒让MathJax加载
  → 查看浏览器控制台是否有MathJax错误

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第六步：测试连续对话                                         │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 点击快捷按钮"💬 请继续回答"
  2. 观察AI是否继续回答
  3. 在输入框输入："请解释一下第2步"
  4. 按Enter发送

  预期结果：
  □ 点击快捷按钮后，AI继续补充内容
  □ 输入追问后，AI基于上下文回答
  □ 无需重新上传图片
  □ 消息正确追加到聊天区域
  □ 新消息的公式也正确渲染

  如果失败：
  → 检查后端日志会话管理是否正常
  → 确认后端未重启（会话存储在内存）
  → 查看浏览器控制台API请求

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第七步：测试历史记录                                         │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 点击顶部"📚 历史记录"按钮
  2. 观察侧边栏弹出
  3. 查看刚才的对话记录
  4. 点击"➕ 新对话"
  5. 再上传一张新图片解题
  6. 再次打开历史记录
  7. 点击第一条历史记录

  预期结果：
  □ 侧边栏从右侧滑出
  □ 显示历史对话列表（包括刚才的对话）
  □ 每条记录显示缩略图、标题、时间
  □ 点击"新对话"后回到上传界面
  □ 新解题后，历史记录增加一条
  □ 点击历史记录可恢复完整对话
  □ 恢复后可查看所有消息
  □ 可以继续追问（如果后端未重启）

  如果失败：
  → 检查浏览器localStorage是否被禁用
  → 查看浏览器控制台会话保存日志
  → 确认后端会话API工作正常

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第八步：测试AI批改作业 + 自动保存错题                        │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 返回模式选择（点击左上角"返回"）
  2. 点击"📝 AI 批改作业"
  3. 上传一张包含题目+答案的图片（最好包含错误答案）
  4. 点击"批改"
  5. 等待AI批改结果

  预期结果：
  □ AI指出答案对错
  □ 如果答案错误：
     • AI详细说明错在哪里
     • 给出正确解法
     • 显示提示："✅ 此题已自动保存到错题本"
     • 显示知识点标签
  □ 如果答案正确：
     • AI简单确认
     • 不保存到错题本

  如果错题未保存：
  → 确认AI回答包含"错误"关键词
  → 确认上传了图片（纯文字不会保存）
  → 查看后端日志"[错题保存]"

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第九步：测试智能错题本                                       │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 返回模式选择
  2. 点击"📚 智能错题本"
  3. 查看错题列表
  4. 点击"🤖 AI智能出题"
  5. 选择一个错题（勾选）
  6. 选择生成模式："混合模式"（推荐）
  7. 输入生成数量：3
  8. 点击"生成题目"

  预期结果：
  □ 错题列表显示之前保存的错题
  □ 每个错题显示缩略图、分析、知识点
  □ 点击AI出题后，弹出配置界面
  □ 生成过程显示进度
  □ 生成成功后，显示新题目列表
  □ 新题目包含题目文本、答案、解析
  □ 公式正确渲染

  如果失败：
  → 确认之前步骤中有错题被保存
  → 检查后端日志AI出题过程
  → 查看API密钥是否有效

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第十步：测试PDF导出                                          │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 在AI出题后的页面
  2. 点击"📄 导出PDF"
  3. 等待生成

  预期结果：
  □ 显示"PDF生成中..."
  □ 生成成功后自动下载PDF文件
  □ 打开PDF文件：
     • 包含所有题目
     • 公式正确渲染（不是LaTeX代码）
     • 格式整齐美观
     • 可以正常打印

  如果失败：
  → 检查浏览器是否允许下载
  → 查看后端日志PDF生成过程
  → 确认Pyppeteer安装正确

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第十一步：测试退出登录                                       │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 点击右上角"退出登录"
  2. 观察界面变化
  3. 重新登录
  4. 查看历史记录和错题本

  预期结果：
  □ 点击退出后，回到登录界面
  □ 再次登录后，数据保留：
     • 历史对话仍然存在
     • 错题本仍然有数据
     • 生成的题目仍然可见

  如果数据丢失：
  → 检查后端会话存储是否持久化
  → 确认后端未重启（会话在内存中）
  → 查看数据库是否正确保存

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第十二步：压力测试（可选）                                   │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 连续上传10张图片解题
  2. 每次解题后追问5-10轮
  3. 观察性能和稳定性

  预期结果：
  □ 系统稳定运行，无崩溃
  □ 响应时间保持稳定（5-15秒）
  □ 内存占用合理（< 500MB）
  □ 历史记录正确保存所有会话

┌─────────────────────────────────────────────────────────────────┐
│  ✅ 第十三步：浏览器控制台检查                                   │
└─────────────────────────────────────────────────────────────────┘

  操作：
  1. 按F12打开浏览器控制台
  2. 切换到Console标签
  3. 清空日志
  4. 重新进行一次完整流程（登录→解题→追问）
  5. 观察日志输出

  预期日志（应该看到这些）：
  □ ✅ [MathJax] 渲染成功
  □ ✅ [会话保存] 成功
  □ ✅ [消息更新] 追问模式
  □ ✅ [Scroll] 已滚动到底部

  不应该看到的（警告）：
  × ❌ [MathJax] 渲染失败
  × ❌ [会话保存] 失败
  × ❌ Failed to fetch
  × ❌ 401 Unauthorized

┌─────────────────────────────────────────────────────────────────┐
│  📊 验证结果汇总                                                 │
└─────────────────────────────────────────────────────────────────┘

  请统计通过的测试项：

  □ 系统启动                  （第1步）
  □ 注册登录                  （第2-3步）
  □ AI智能解题                （第4步）
  □ 公式渲染                  （第5步）
  □ 连续对话                  （第6步）
  □ 历史记录                  （第7步）
  □ 批改作业+自动保存错题     （第8步）
  □ 智能错题本                （第9步）
  □ PDF导出                   （第10步）
  □ 退出登录                  （第11步）

  通过数量：_____ / 11

  如果全部通过：
  ✅ 恭喜！系统运行完全正常，可以正式使用！

  如果有失败项：
  ⚠️  请参考【必读】数据库版本使用指南.md的"常见问题"章节
  ⚠️  或查看【完成】V25.2模块化重构交付报告.md的"技术支持"章节

┌─────────────────────────────────────────────────────────────────┐
│  🔍 故障排查快速参考                                             │
└─────────────────────────────────────────────────────────────────┘

  【公式不渲染】
  → 刷新页面 → 等待5秒 → 查看控制台MathJax错误

  【登录失败401】
  → 退出登录 → 清除缓存 → 重新登录

  【错题未保存】
  → 确认AI回答包含"错误" → 确认上传了图片 → 查看后端日志

  【历史记录为空】
  → 确认解题成功 → 等待3秒 → 刷新历史记录

  【无法连接后端】
  → 检查8000端口 → 重启后端服务 → 查看后端日志

  【数据库连接失败】
  → 检查MySQL服务 → 验证连接信息 → 查看后端日志

╔═══════════════════════════════════════════════════════════════════╗
║                                                                   ║
║  📝 验证完成！                                                    ║
║                                                                   ║
║  如有问题，请查看：                                               ║
║  • 【必读】数据库版本使用指南.md                                  ║
║  • 【完成】V25.2模块化重构交付报告.md                             ║
║                                                                   ║
║  © 2025 沐梧AI解题系统 V25.2                                      ║
║                                                                   ║
╚═══════════════════════════════════════════════════════════════════╝

